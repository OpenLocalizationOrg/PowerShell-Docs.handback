<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3f7c226fcb496e5bb51ba601429c54b43de9d52</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Working-with-Files-and-Folders.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87026e4ad65f8c257f23f8ffa7db31bc34b41a88</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0676977dc6070c073b9b44172a4c78d01d02d677</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with Files and Folders</source>
          <target state="translated">ファイルとフォルダーの操作</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">PowerShell, コマンドレット</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Working with Files and Folders</source>
          <target state="translated">ファイルとフォルダーの操作</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Navigating through Windows PowerShell drives and manipulating the items on them is similar to manipulating files and folders on Windows physical disk drives.</source>
          <target state="translated">Windows PowerShell ドライブ間を移動したり、Windows PowerShell ドライブ上の項目を操作したりすることは、Windows の物理ディスク ドライブ上のファイルやフォルダーを操作することと似ています。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>We will discuss how to deal with specific file and folder manipulation tasks in this section.</source>
          <target state="translated">このセクションでは、ファイルとフォルダーを操作するための特定のタスクの処理方法について説明します。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Listing All the Files and Folders Within a Folder</source>
          <target state="translated">フォルダー内のすべてのファイルとフォルダーの一覧表示</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can get all items directly within a folder by using <bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept> を使用することにより、フォルダー内のすべての項目を直接取得することができます。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add the optional <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> parameter to display hidden or system items.</source>
          <target state="translated">非表示の項目やシステム項目を表示するには、オプションの <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> パラメーターを追加します。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, this command displays the direct contents of Windows PowerShell Drive C (which is the same as the Windows physical drive C):</source>
          <target state="translated">たとえば、このコマンドは、Windows PowerShell ドライブ C (Windows の物理ドライブ C と同じ) に直接含まれるコンテンツを表示します。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The command lists only the directly contained items, much like using Cmd.exe's <bpt id="p1">**</bpt>DIR<ept id="p1">**</ept> command or <bpt id="p2">**</bpt>ls<ept id="p2">**</ept> in a UNIX shell.</source>
          <target state="translated">このコマンドは、Cmd.exe の <bpt id="p1">**</bpt>DIR<ept id="p1">**</ept> コマンドや UNIX シェルの <bpt id="p2">**</bpt>ls<ept id="p2">**</ept> を使用したときと同様に、直接含まれている項目のみを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to show contained items, you need to specify the <bpt id="p1">**</bpt>-Recurse<ept id="p1">**</ept> parameter as well.</source>
          <target state="translated">内包されている項目を表示するには、<bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> パラメーターも指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(This can take an extremely long time to complete.) To list everything on the C drive:</source>
          <target state="translated">(完了までにかなりの時間がかかることがあります。)C ドライブ上のすべての項目を一覧表示するには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept> can filter items with its <bpt id="p2">**</bpt>Path<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Filter<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Include<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Exclude<ept id="p5">**</ept> parameters, but those are typically based only on name.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept> は、<bpt id="p2">**</bpt>Path<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Filter<ept id="p3">**</ept>、<bpt id="p4">**</bpt>Include<ept id="p4">**</ept>、<bpt id="p5">**</bpt>Exclude<ept id="p5">**</ept> の各パラメーターを使用して項目をフィルター処理できますが、通常、これらは名前にのみ基づいています。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can perform complex filtering based on other properties of items by using <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> を使用することにより、項目の他のプロパティに基づいた複雑なフィルター処理を実行できます。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following command finds all executables within the Program Files folder that were last modified after October 1, 2005 and which are neither smaller than 1 megabyte nor larger than 10 megabytes:</source>
          <target state="translated">次のコマンドは、Program Files フォルダー内にある、2005 年 10 月 1 日より後に最終更新され、1 メガバイト以上、10 メガバイト以下のすべての実行可能ファイルを検出します。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copying Files and Folders</source>
          <target state="translated">ファイルとフォルダーのコピー</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Copying is done with <bpt id="p1">**</bpt>Copy-Item<ept id="p1">**</ept>.</source>
          <target state="translated">コピーは <bpt id="p1">**</bpt>Copy-Item<ept id="p1">**</ept> を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following command backs up C:\\boot.ini to C:\\boot.bak:</source>
          <target state="translated">次のコマンドは、C:\boot.ini を C:\boot.bak にバックアップします。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the destination file already exists, the copy attempt fails.</source>
          <target state="translated">コピー先のファイルが既に存在する場合、コピー操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To overwrite a pre-existing destination, use the Force parameter:</source>
          <target state="translated">既存のコピー先ファイルを上書きするには、Force パラメーターを使用します。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This command works even when the destination is read-only.</source>
          <target state="translated">このコマンドは、コピー先が読み取り専用である場合にも使用できます。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Folder copying works the same way.</source>
          <target state="translated">フォルダーのコピーも同様に動作します。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This command copies the folder C:\\temp\\test1 to the new folder c:\\temp\\DeleteMe recursively:</source>
          <target state="translated">次のコマンドでは、フォルダー C:\temp\test1 を新しいフォルダー c:\temp\DeleteMe に再帰的にコピーします。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also copy a selection of items.</source>
          <target state="translated">選択した項目をコピーすることもできます。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following command copies all .txt files contained anywhere in c:\\data to c:\\temp\\text:</source>
          <target state="translated">次のコマンドでは、c:\data 内の任意の場所に格納されているすべての .txt ファイルを c:\temp\text にコピーします。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can still use other tools to perform file system copies.</source>
          <target state="translated">ファイル システムのコピー操作には、他のツールを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>XCOPY, ROBOCOPY, and COM objects, such as the <bpt id="p1">**</bpt>Scripting.FileSystemObject,<ept id="p1">**</ept> all work in Windows PowerShell.</source>
          <target state="translated">XCOPY、ROBOCOPY、および COM オブジェクト (<bpt id="p1">**</bpt>Scripting.FileSystemObject<ept id="p1">**</ept> など) はすべて Windows PowerShell で動作します。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, you can use the Windows Script Host <bpt id="p1">**</bpt>Scripting.FileSystem COM<ept id="p1">**</ept> class to back up C:\\boot.ini to C:\\boot.bak:</source>
          <target state="translated">たとえば、Windows Script Host の <bpt id="p1">**</bpt>Scripting.FileSystem COM<ept id="p1">**</ept> クラスを使用して、C:\boot.ini を C:\boot.bak にバックアップするには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating Files and Folders</source>
          <target state="translated">ファイルとフォルダーの作成</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating new items works the same on all Windows PowerShell providers.</source>
          <target state="translated">新しい項目の作成は、すべての Windows PowerShell プロバイダーで同じ方法で行われます。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a Windows PowerShell provider has more than one type of item—for example, the FileSystem Windows PowerShell provider distinguishes between directories and files—you need to specify the item type.</source>
          <target state="translated">Windows PowerShell プロバイダーに複数の種類の項目が含まれている場合 (たとえば、FileSystem Windows PowerShell プロバイダーではディレクトリとファイルが区別されます)、項目の種類を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This command creates a new folder C:\\temp\\New Folder:</source>
          <target state="translated">次のコマンドでは、フォルダー C:\temp\New Folder が新規作成されます。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command creates a new empty file C:\\temp\\New Folder\\file.txt</source>
          <target state="translated">次のコマンドでは、空のファイル C:\temp\New Folder\file.txt が新規作成されます。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Removing All Files and Folders Within a Folder</source>
          <target state="translated">フォルダー内のすべてのファイルとフォルダーの削除</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can remove contained items using <bpt id="p1">**</bpt>Remove-Item<ept id="p1">**</ept>, but you will be prompted to confirm the removal if the item contains anything else.</source>
          <target state="translated">内包されている項目を削除するには、<bpt id="p1">**</bpt>Remove-Item<ept id="p1">**</ept> を使用します。ただし、その項目に他の何らかの項目が含まれている場合、削除の確認を求められます。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, if you attempt to delete the folder C:\\temp\\DeleteMe that contains other items, Windows PowerShell prompts you for confirmation before deleting the folder:</source>
          <target state="translated">たとえば、他の項目を含むフォルダー C:\temp\DeleteMe を削除しようとすると、フォルダーが削除される前に、Windows PowerShell から次のような削除の確認メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you do not want to be prompted for each contained item, specify the <bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> parameter:</source>
          <target state="translated">内包されている項目ごとに削除の確認が行われないようにする場合は、<bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> パラメーターを使用します。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Mapping a Local Folder as a Windows Accessible Drive</source>
          <target state="translated">Windows のアクセス可能なドライブとしてのローカル フォルダーのマッピング</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can also map a local folder, using the <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> command.</source>
          <target state="translated"><bpt id="p1">**</bpt>subst<ept id="p1">**</ept> コマンドを使用することにより、ローカル フォルダーをマッピングすることもできます。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following command creates a local drive P: rooted in the local Program Files directory:</source>
          <target state="translated">次のコマンドは、ローカルの Program Files ディレクトリをルートとするローカル ドライブ P: を作成します。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Just as with network drives, drives mapped within Windows PowerShell using <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> are immediately visible to the Windows PowerShell shell.</source>
          <target state="translated">ネットワーク ドライブと同様に、<bpt id="p1">**</bpt>subst<ept id="p1">**</ept> を使用して Windows PowerShell 内でマッピングされたドライブは、直ちに Windows PowerShell シェルに表示されます。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Reading a Text File into an Array</source>
          <target state="translated">配列へのテキスト ファイルの読み込み</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One of the more common storage formats for text data is in a file with separate lines treated as distinct data elements.</source>
          <target state="translated">テキスト データの一般的な格納形式の 1 つに、個々の行を個別のデータ要素として扱うファイルを使用する方法があります。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> cmdlet can be used to read an entire file in one step, as shown here:</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> コマンドレットを使用することにより、1 つのステップでファイル全体を読み取ることができます。以下にその例を示します。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> already treats the data read from the file as an array, with one element per line of file content.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> は、ファイルから読み取ったデータを、1 行のファイル内容につき 1 つの要素を含む配列として扱います。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can confirm this by checking the <bpt id="p1">**</bpt>Length<ept id="p1">**</ept> of the returned content:</source>
          <target state="translated">これを確認するには、返された内容の <bpt id="p1">**</bpt>Length<ept id="p1">**</ept> をチェックします。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This command is most useful for getting lists of information into Windows PowerShell directly.</source>
          <target state="translated">このコマンドは、情報の一覧を Windows PowerShell に直接取得するときに最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, you might store a list of computer names or IP addresses in a file C:\\temp\\domainMembers.txt, with one name on each line of the file.</source>
          <target state="translated">たとえば、コンピューター名または IP アドレスの一覧を、ファイルの各行に 1 つの名前を入力して C:\temp\domainMembers.txt ファイルに保存できます。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> to retrieve the file contents and put them in the variable <bpt id="p2">**</bpt>$Computers<ept id="p2">**</ept>:</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> を使用してファイルの内容を取得し、変数 <bpt id="p2">**</bpt>$Computers<ept id="p2">**</ept> に格納するには、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$Computers<ept id="p1">**</ept> is now an array containing a computer name in each element.</source>
          <target state="translated"><bpt id="p1">**</bpt>$Computers<ept id="p1">**</ept> には、各要素に 1 つのコンピューター名が含まれた配列が格納されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
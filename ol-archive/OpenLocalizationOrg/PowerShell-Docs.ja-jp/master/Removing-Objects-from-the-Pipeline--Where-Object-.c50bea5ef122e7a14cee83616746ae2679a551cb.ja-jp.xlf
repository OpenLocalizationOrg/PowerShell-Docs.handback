<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94117fcf337ecf550d6df1d167e608ba64582c03</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Removing-Objects-from-the-Pipeline--Where-Object-.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f0a30bc86fa9c9eeed62a99cdbcf6a4e50c1d33</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41ca3559dd3ce0334ea64597c1b412608524b7cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Removing Objects from the Pipeline  Where Object</source>
          <target state="translated">パイプラインからオブジェクトを削除する (Where-Object)</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">PowerShell, コマンドレット</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Removing Objects from the Pipeline (Where-Object)</source>
          <target state="translated">パイプラインからオブジェクトを削除する (Where-Object)</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, you often generate and pass along more objects to a pipeline than you want.</source>
          <target state="translated">Windows PowerShell では、考えていた数よりも多くのオブジェクトが生成され、パイプラインに渡されることがよくあります。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can specify the properties of particular objects to display by using the <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets, but this does not help with the problem of removing entire objects from the display.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ept id="p1">**</ept> コマンドレットを使用して、特定のオブジェクトのプロパティを指定し、表示することができます。しかし、これはオブジェクト全体を表示から削除するという問題には役立ちません。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You may want to filter objects before the end of a pipeline, so you can perform actions on only a subset of the initially-generated objects.</source>
          <target state="translated">パイプラインの終了前に、オブジェクトをフィルタリングすることによって、最初に生成されたオブジェクトのサブセット上でのみアクションを実行できます。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Windows PowerShell includes a <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet that allows you to test each object in the pipeline and only pass it along the pipeline if it meets a particular test condition.</source>
          <target state="translated">Windows PowerShell には、<bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> コマンドレットがあります。それを使用すると、パイプラインの各オブジェクトをテストし、特定のテスト条件を満たしている場合にのみ、オブジェクトをパイプラインに沿って渡すことが可能になります。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Objects that do not pass the test are removed from the pipeline.</source>
          <target state="translated">テストを通過しなかったオブジェクトは、パイプラインから削除されます。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You supply the test condition as the value of the <bpt id="p1">**</bpt>Where-ObjectFilterScript<ept id="p1">**</ept> parameter.</source>
          <target state="translated">テスト条件は、<bpt id="p1">**</bpt>Where-ObjectFilterScript<ept id="p1">**</ept> パラメーターの値として指定します。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Performing Simple Tests with Where-Object</source>
          <target state="translated">Where-Object を使用して単純なテストを実行する</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">**</bpt>FilterScript<ept id="p1">**</ept> is a <bpt id="p2">*</bpt>script block<ept id="p2">*</ept> -  one or more Windows PowerShell commands surrounded by braces {} - that evaluates to true or false.</source>
          <target state="translated"><bpt id="p1">**</bpt>FilterScript<ept id="p1">**</ept> の値は、true または false に評価される<bpt id="p2">*</bpt>スクリプト ブロック<ept id="p2">*</ept> - (中かっこ {} で囲まれた Windows PowerShell コマンドの 1 つ以上のコマンド) です。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These script blocks can be very simple, but creating them requires knowing about another Windows PowerShell concept, comparison operators.</source>
          <target state="translated">これらのスクリプト ブロックはごく単純にすることができますが、作成するには別の Windows PowerShell の概念である比較演算子について知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A comparison operator compares the items that appear on each side of it.</source>
          <target state="translated">比較演算子は、演算子の両辺のアイテムを比較します。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Comparison operators begin with a '-' character and are followed by a name.</source>
          <target state="translated">比較演算子は、'-' 文字で始まり、名前が続きます。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Basic comparison operators work on almost any kind of object.</source>
          <target state="translated">基本的な比較演算子は、ほとんどの種類のオブジェクトで機能します。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The more advanced comparison operators might only work on text or arrays.</source>
          <target state="translated">より高度な比較演算子の中には、テキストまたは配列でのみ機能するものもあります。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, when working with text, Windows PowerShell comparison operators are case-insensitive.</source>
          <target state="translated">既定では、テキストで使用する場合、Windows PowerShell の比較演算子は大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Due to parsing considerations, symbols such as &lt;,&gt;, and = are not used as comparison operators.</source>
          <target state="translated">解析の考慮事項のため、&lt;、&gt;、= などのシンボルは、比較演算子として使用されません。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Instead, comparison operators are comprised of letters.</source>
          <target state="translated">代わりに、比較演算子は文字で構成されます。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The basic comparison operators are listed in the following table.</source>
          <target state="translated">基本的な比較演算子を次の表に挙げます。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Comparison Operator</source>
          <target state="translated">比較演算子</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">意味</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example (returns true)</source>
          <target state="translated">例 (true を返す)</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-eq</source>
          <target state="translated">-eq</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>is equal to</source>
          <target state="translated">次の値と等しい</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>1 -eq 1</source>
          <target state="translated">1 -eq 1</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-ne</source>
          <target state="translated">-ne</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Is not equal to</source>
          <target state="translated">次の値と等しくない</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>1 -ne 2</source>
          <target state="translated">1 -ne 2</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-lt</source>
          <target state="translated">-lt</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Is less than</source>
          <target state="translated">次の値未満</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>1 -lt 2</source>
          <target state="translated">1 -lt 2</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-le</source>
          <target state="translated">-le</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Is less than or equal to</source>
          <target state="translated">次の値以下</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>1 -le 2</source>
          <target state="translated">1 -le 2</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-gt</source>
          <target state="translated">-gt</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Is greater than</source>
          <target state="translated">次の値より大きい</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>2 -gt 1</source>
          <target state="translated">2 -gt 1</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-ge</source>
          <target state="translated">-ge</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Is greater than or equal to</source>
          <target state="translated">次の値以上</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>2 -ge 1</source>
          <target state="translated">2 -ge 1</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-like</source>
          <target state="translated">-like</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Is like (wildcard comparison for text)</source>
          <target state="translated">次の文字列と類似 (テキストのワイルドカード比較)</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>"file.doc" -like "f\*.do?"</source>
          <target state="translated">"file.doc"のように"f\ * 元ですか?"</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-notlike</source>
          <target state="translated">-notlike</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Is not like (wildcard comparison for text)</source>
          <target state="translated">次の文字列と類似していない (テキストのワイルドカード比較)</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>"file.doc" -notlike "p\*.doc"</source>
          <target state="translated">"file.doc"の notlike"p\ * .doc"</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>-contains</source>
          <target state="translated">-contains</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Contains</source>
          <target state="translated">［内容］</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>1,2,3 -contains 1</source>
          <target state="translated">1,2,3 -contains 1</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>-notcontains</source>
          <target state="translated">-notcontains</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Does not contain</source>
          <target state="translated">［次の値を含まない］</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>1,2,3 -notcontains 4</source>
          <target state="translated">1,2,3 -notcontains 4</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Where-Object script blocks use the special variable '$_' to refer to the current object in the pipeline.</source>
          <target state="translated">Where-Object スクリプト ブロックは、パイプライン中の現在のオブジェクトを参照するために、特殊変数 '$_' を使用します。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Here is an example of how it works.</source>
          <target state="translated">次に挙げるのは、その働きを示す例です。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you have a list of numbers, and only want to return the ones that are less than 3, you can use Where-Object to filter the numbers by typing:</source>
          <target state="translated">数値の一覧があり、3 未満の値だけを返したい場合、Where-Object を使用して、次のように入力して数値を抽出できます。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Filtering Based on Object Properties</source>
          <target state="translated">オブジェクトのプロパティに基づくフィルタリング</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Since $_ refers to the current pipeline object, we can access its properties for our tests.</source>
          <target state="translated">$_ は、現在のパイプライン オブジェクトを参照するので、テストのためにそのプロパティにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>As an example, we can look at the Win32_SystemDriver class in WMI.</source>
          <target state="translated">例として、WMI の Win32_SystemDriver クラスを取り上げます。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>There might be hundreds of system drivers on a particular system, but you might only be interested in a particular set of the system drivers, such as those which are currently running.</source>
          <target state="translated">特定のシステムには、何百ものシステム ドライバーが存在する可能性がありますが、関心を向けるのは、現在実行中のシステム ドライバーなど、システム ドライバーの特定のセットだけの場合があります。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you use Get-Member to view Win32_SystemDriver members (<bpt id="p1">**</bpt>Get-WmiObject -Class Win32_SystemDriver | Get-Member -MemberType Property<ept id="p1">**</ept>) you will see that the relevant property is State, and that it has a value of "Running" when the driver is running.</source>
          <target state="translated">Get-Member を使用して、Win32_SystemDriver メンバーを表示する場合 (<bpt id="p1">**</bpt>Get-WmiObject -Class Win32_SystemDriver | Get-Member -MemberType Property<ept id="p1">**</ept>)、関連するプロパティは State に、ドライバーが実行中であればその値は "Running" になります。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can filter the system drivers, selecting only the running ones by typing:</source>
          <target state="translated">システム ドライバーをフィルタリングして、次のように入力して実行中のドライバーのみを選択できます。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This still produces a long list.</source>
          <target state="translated">生成されるのは、依然として長い一覧です。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You may want to filter to only select the drivers set to start automatically by testing the StartMode value as well:</source>
          <target state="translated">StartMode 値を同様にテストして、自動的に起動されるドライバーのセットのみを選択するようフィルタリングすることにします。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This gives us a lot of information we no longer need because we know that the drivers are running.</source>
          <target state="translated">これにより、もう必要のない数多くの情報が与えられます。それらのドライバーが実行中なのはわかっています。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In fact, the only information we probably need at this point are the name and the display name.</source>
          <target state="translated">事実、この時点でおそらく必要とされる情報は、名前と表示名だけです。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following command includes only those two properties, resulting in much simpler output:</source>
          <target state="translated">次のコマンドには、それら 2 つのプロパティのみが含まれており、よりシンプルに結果を出力します。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>There are two Where-Object elements in the above command, but they can be expressed in a single Where-Object element by using the -and logical operator, like this:</source>
          <target state="translated">上記のコマンドには Where-Object 要素が 2 つありますが、次のように -and 論理演算子を使用して、Where-Object 要素 1 つで表現することができます。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The standard logical operators are listed in the following table.</source>
          <target state="translated">標準的な論理演算子を次の表に挙げます。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Logical Operator</source>
          <target state="translated">論理演算子</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">意味</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Example (returns true)</source>
          <target state="translated">例 (true を返す)</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-and</source>
          <target state="translated">-and</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Logical and; true if both sides are true</source>
          <target state="translated">論理積。両辺が true の場合は true</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(1 -eq 1) -and (2 -eq 2)</source>
          <target state="translated">(1 -eq 1) -and (2 -eq 2)</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-or</source>
          <target state="translated">-or</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Logical or; true if either side is true</source>
          <target state="translated">論理和。どちらかの辺が true の場合は true</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>(1 -eq 1) -or (1 -eq 2)</source>
          <target state="translated">(1 -eq 1) -or (1 -eq 2)</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>-not</source>
          <target state="translated">-not</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Logical not; reverses true and false</source>
          <target state="translated">論理否定。true と false を逆にする</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-not (1 -eq 2)</source>
          <target state="translated">-not (1 -eq 2)</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>\!</source>
          <target state="translated">!</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Logical not; reverses true and false</source>
          <target state="translated">論理否定。true と false を逆にする</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>\!(1 -eq 2)</source>
          <target state="translated">\!(1-eq 2)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
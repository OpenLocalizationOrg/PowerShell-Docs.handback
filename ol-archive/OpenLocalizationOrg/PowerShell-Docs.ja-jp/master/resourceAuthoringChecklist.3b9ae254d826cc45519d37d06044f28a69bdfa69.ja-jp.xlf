<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2900987b1102cf41880e5af0a0cc44bc6499ef5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dsc\resourceAuthoringChecklist.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2baad253934bbfe6001cd2fa64c9e75ed795d2f2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0eaa6b6e447eafacf861f5f6d9955fda47fb1f4c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Resource authoring checklist</source>
          <target state="translated">リソース作成のチェックリスト</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,DSC</source>
          <target state="translated">PowerShell, DSC</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Resource authoring checklist</source>
          <target state="translated">リソース作成のチェックリスト</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This checklist is a list of best practices when authoring a new DSC Resource.</source>
          <target state="translated">このチェックリストは、新しい DSC リソースを作成するときのベスト プラクティスの一覧です。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Resource module contains .psd1 file and schema.mof for every resource</source>
          <target state="translated">リソース モジュールにすべてのリソースの .psd1 ファイルと schema.mof が含まれている</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Check that your resource has correct structure and contains all required files.</source>
          <target state="translated">リソースが正しい構造であり、必要なすべてのファイルが含まれていることを確認します。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Every resource module should contain a .psd1 file and every non-composite resource should have schema.mof file.</source>
          <target state="translated">すべてのリソース モジュールには .psd1 ファイルが含まれている必要があり、すべて非複合リソースには .schema.mof ファイルが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Resources that do not contain schema will not be listed by <bpt id="p1">**</bpt>Get-DscResource<ept id="p1">**</ept> and users will not be able to use the intellisense when writing code against those modules in ISE.</source>
          <target state="translated">スキーマが含まれていないリソースは <bpt id="p1">**</bpt>Get-DscResource<ept id="p1">**</ept> によって一覧表示されず、ユーザーは ISE でこれらのモジュールに対してコードを記述するときに IntelliSense を使用できません。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The directory structure for xRemoteFile resource, which is part of the <bpt id="p1">[</bpt>xPSDesiredStateConfiguration resource module<ept id="p1">](https://github.com/PowerShell/xPSDesiredStateConfiguration)</ept>, looks as follows:</source>
          <target state="translated"><bpt id="p1">[</bpt>xPSDesiredStateConfiguration リソース モジュール<ept id="p1">](https://github.com/PowerShell/xPSDesiredStateConfiguration)</ept>の一部である xRemoteFile リソースのディレクトリ構造は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Resource and schema are correct</source>
          <target state="translated">リソースとスキーマが正しい</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Verify the resource schema (*.schema.mof) file.</source>
          <target state="translated">リソース スキーマ (*.schema.mof) ファイルを確認します。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>DSC Resource Designer<ept id="p1">](https://www.powershellgallery.com/packages/xDSCResourceDesigner/)</ept> to help develop and test your schema.</source>
          <target state="translated"><bpt id="p1">[</bpt>DSC リソース デザイナー<ept id="p1">](https://www.powershellgallery.com/packages/xDSCResourceDesigner/)</ept>をスキーマの開発と試験に利用できます。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Make sure that:</source>
          <target state="translated">次のことを確認します。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Property types are correct (e.g. don’t use String for properties which accept numeric values, you should use UInt32 or other numeric types instead)</source>
          <target state="translated">プロパティの型が正しい (たとえば、数値を受け入れるプロパティには文字列を使用せず、UInt32 またはその他の数値型を代わりに使用する必要があります)</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Property attributes are specified correctly as: ([key], [required], [write], [read])</source>
          <target state="translated">プロパティの属性が正しく指定されている ([key]、[required]、[write]、[read])</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At least one parameter in the schema has to be marked as [key]</source>
          <target state="translated">スキーマ内の少なくとも 1 つのパラメーターが [key] としてマークされている必要があります。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>[read] property does not coexist together with any of: [required], [key], [write]</source>
          <target state="translated">[read] プロパティは [required]、[key]、[write] のいずれとも共存しません。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If multiple qualifiers are specified except [read], then [key] takes precedence</source>
          <target state="translated">[read] 以外の複数の条件が指定されている場合、[key] が優先されます。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If [write] and [required] are specified, then [required] takes precedence</source>
          <target state="translated">[write] と [required] が指定されている場合、[required] が優先されます。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>ValueMap is specified where appropriate</source>
          <target state="translated">ValueMap が適切な場所に指定されている</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">次に例を示します。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Friendly name is specified and confirms to DSC naming conventions</source>
          <target state="translated">フレンドリ名が指定され、DSC 名前付け規則に準拠している</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example: <ph id="ph1">```[ClassVersion("1.0.0.0"), FriendlyName("xRemoteFile")]```</ph></source>
          <target state="translated">例: <ph id="ph1">```[ClassVersion("1.0.0.0"), FriendlyName("xRemoteFile")]```</ph></target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Every field has meaningful description.</source>
          <target state="translated">すべてのフィールドにわかりやすい説明があります。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The PowerShell GitHub repository has good examples, such as <bpt id="p1">[</bpt>the .schema.mof for xRemoteFile<ept id="p1">](https://github.com/PowerShell/xPSDesiredStateConfiguration/blob/dev/DSCResources/MSFT_xRemoteFile/MSFT_xRemoteFile.schema.mof)</ept></source>
          <target state="translated">PowerShell GitHub リポジトリには、<bpt id="p1">[</bpt>xRemoteFile の .schema.mof<ept id="p1">](https://github.com/PowerShell/xPSDesiredStateConfiguration/blob/dev/DSCResources/MSFT_xRemoteFile/MSFT_xRemoteFile.schema.mof)</ept> など、良い例があります。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Additionally, you should use <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> cmdlets from <bpt id="p3">[</bpt>DSC Resource Designer<ept id="p3">](https://www.powershellgallery.com/packages/xDSCResourceDesigner/)</ept> to automatically verify the resource and schema:</source>
          <target state="translated">また、<bpt id="p3">[</bpt>DSC リソース デザイナー<ept id="p3">](https://www.powershellgallery.com/packages/xDSCResourceDesigner/)</ept>から <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> および <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> コマンドレットを使用して、リソースとスキーマを自動的に確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">たとえば、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Resource loads without errors</source>
          <target state="translated">リソースがエラーなしで読み込まれる</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Check whether the resource module can be successfully loaded.</source>
          <target state="translated">リソース モジュールを正常に読み込めるか確認します。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This can be achieved manually, by running <ph id="ph1">`Import-Module &lt;resource_module&gt; -force `</ph> and confirming that no errors occurred, or by writing test automation.</source>
          <target state="translated">これは、手動で実行する (<ph id="ph1">`Import-Module &lt;resource_module&gt; -force `</ph> を実行してエラーが発生しないことを確認する) か、自動テストを作成して実行することができます。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In case of the latter, you can follow this structure in your test case:</source>
          <target state="translated">後者の場合は、テスト ケースで次の構造に従うことができます。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Resource is idempotent in the positive case</source>
          <target state="translated">正の場合、リソースはべき等である</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>One of the fundamental characteristics of DSC resources is be idempotence.</source>
          <target state="translated">DSC リソースの基本的な特性の 1 つにべき等性があります。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It means that applying a DSC configuration containing that resource multiple times will always achieve the same result.</source>
          <target state="translated">つまり、そのリソースを含む DSC 構成を複数回適用したとき、常に同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, if we create a configuration which contains the following File resource:</source>
          <target state="translated">たとえば、次の File リソースを含む構成を作成するとします。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>After applying it for the first time, file test.txt should appear in C:\test folder.</source>
          <target state="translated">これを最初に適用した後、test.txt ファイルが C:\test フォルダーに出現します。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, subsequent runs of the same configuration should not change the state of the machine (e.g. no copies of the test.txt file should be created).</source>
          <target state="translated">ただし、同じ構成の後続の実行で、マシンの状態を変更しないでください (たとえば、test.txt ファイルのコピーを作成しないでください)。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To ensure a resource is idempotent you can repeatedly call <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> when testing the resource directly, or call <bpt id="p2">**</bpt>Start-DscConfiguration<ept id="p2">**</ept> multiple times when doing end to end testing.</source>
          <target state="translated">リソースがべき等であることを確認するには、リソースを直接テストする場合は <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> を繰り返し呼び出し、エンド ツー エンド テストを実行する場合は <bpt id="p2">**</bpt>Start-DscConfiguration<ept id="p2">**</ept> を複数回呼び出します。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The result should be the same after every run.</source>
          <target state="translated">実行するたびに結果が同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Test user modification scenario</source>
          <target state="translated">ユーザー変更シナリオのテスト</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By changing the state of the machine and then rerunning DSC, you can verify that <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Test-TargetResource<ept id="p2">**</ept> function properly.</source>
          <target state="translated">コンピューターの状態を変更し、DSC を再実行することで、<bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> と <bpt id="p2">**</bpt>Test-TargetResource<ept id="p2">**</ept> が適切に機能することを確認できます。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Here are steps you should take:</source>
          <target state="translated">実行する手順を次に示します。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Start with the resource not in the desired state.</source>
          <target state="translated">目的の状態でないリソースで開始します。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Run configuration with your resource</source>
          <target state="translated">リソースで構成を実行します。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Verify <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> returns True</source>
          <target state="translated"><bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> が true を返すことを確認します。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Modify the configured item to be out of the desired state</source>
          <target state="translated">構成対象アイテムが目的の状態から抜けるように変更します。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Verify <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> returns false Here’s a more concrete example using Registry resource:</source>
          <target state="translated"><bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> が false を返すことを確認します。Registry リソースを使用した具体的な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Start with registry key not in the desired state</source>
          <target state="translated">目的の状態でないレジストリ キーで開始します。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Run <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> with a configuration to put it in the desired state and verify it passes.</source>
          <target state="translated"><bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> を構成で実行し、目的の状態にして正常終了することを確認します。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Run <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> and verify it returns true</source>
          <target state="translated"><bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> を実行し、true を返すことを確認します。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Modify the value of the key so that it is not in the desired state</source>
          <target state="translated">キーの値を変更して、目的でない状態にします。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Run <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> and verify it returns false</source>
          <target state="translated"><bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> を実行し、false を返すことを確認します。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Get-TargetResource functionality was verified using Get-DscConfiguration</source>
          <target state="translated">Get-DscConfiguration を使用して Get-TargetResource 機能が検証されている</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Get-TargetResource should return details of the current state of the resource.</source>
          <target state="translated">Get-TargetResource は、リソースの現在の状態の詳細を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Make sure to test it by calling Get-DscConfiguration after you apply the configuration and verifying that output correctly reflects the current state of the machine.</source>
          <target state="translated">構成を適用した後に Get-DscConfiguration を呼び出し、出力がマシンの現在の状態を正しく反映していることを検証することによってテストします。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It's important to test it separately, since any issues in this area won't appear when calling Start-DscConfiguration.</source>
          <target state="translated">この領域の問題は Start-DscConfiguration の呼び出し時には出現しないため、個別にテストすることが重要です。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions directly</source>
          <target state="translated"><bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 関数を直接呼び出す</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Make sure you test the <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions implemented in your resource by calling them directly and verifying that they work as expected.</source>
          <target state="translated">リソースに実装されている <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 関数をテストするには、それらを直接呼び出し、期待どおりに動作することを確認します。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Verify End to End using <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> を使用してエンド ツー エンドで確認する</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Testing <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions by calling them directly is important, but not all issues will be discovered this way.</source>
          <target state="translated">直接呼び出すことによって <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 関数をテストすることは重要ですが、この方法ですべての問題が検出されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You should focus significant part of your testing on using <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> or the pull server.</source>
          <target state="translated">テストにおいては、<bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> やプル サーバーの使用に関する部分を重視する必要があります。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In fact, this is how users will use the resource, so don’t underestimate the significance of this type of tests.</source>
          <target state="translated">これはユーザーが実際にリソースを使用する方法であり、この種類のテストの重要性を過小評価しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Possible types of issues:</source>
          <target state="translated">可能性がある問題の種類:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Credential/Session may behave differently because the DSC agent runs as a service.</source>
          <target state="translated">DSC エージェントはサービスとして実行されるため、資格情報またはセッションの動作が異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Be sure to test any features here end to end.</source>
          <target state="translated">機能は必ずエンド ツー エンドでテストしてください。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Errors output by <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> may be different than those displayed when calling the <bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept> function directly.</source>
          <target state="translated"><bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> によるエラー出力は、<bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept> 関数を直接呼び出したときに表示されるものとは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Test compatability on all DSC supported platforms</source>
          <target state="translated">すべての DSC 対応プラットフォームで互換性を試験する</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Resource should work on all DSC supported platforms (Windows Server 2008 R2 and newer).</source>
          <target state="translated">リソースは、DSC がサポートされているすべてのプラットフォーム (Windows Server 2008 R2 以降) で動作する必要があります。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Install the latest WMF (Windows Management Framework) on your OS to get the latest version of DSC.</source>
          <target state="translated">DSC の最新バージョンを取得するには、OS に最新の WMF (Windows Management Framework) をインストールします。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If your resource does not work on some of these platforms by design, a specific error message should be returned.</source>
          <target state="translated">リソースがこれらのプラットフォームの一部で動作しないことが意図的である場合は、特定のエラー メッセージが返される必要があります。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also, make sure your resource checks whether cmdlets you are calling are present on particular machine.</source>
          <target state="translated">また、リソースで、呼び出すコマンドレットが特定のマシン上に存在するかどうかがチェックされることも確認します。</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Windows Server 2012 added a large number of new cmdlets that are not available on Windows Server 2008R2, even with WMF installed.</source>
          <target state="translated">Windows Server 2012 には、WMF がインストールされていても Windows Server 2008R2では使用できない多数の新しいコマンドレットが追加されています。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Verify on Windows Client (if applicable)</source>
          <target state="translated">(該当する場合) Windows クライアントで確認する</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>One very common test gap is verifying the resource only on server versions of Windows.</source>
          <target state="translated">非常に一般的なテスト不足の 1 つは、Windows のサーバー バージョンでのみリソースを検証することです。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Many resources are also designed to work on Client SKUs, so if that’s true in your case, don’t forget to test it on those platforms as well.</source>
          <target state="translated">多くのリソースはクライアント SKU でも動作するように設計されているため、その場合は、これらのプラットフォームでも必ずテストします。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Get-DSCResource lists the resource</source>
          <target state="translated">Get-DscResource でリソースが一覧表示される</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>After deploying the module, calling Get-DscResource should list your resource among others as a result.</source>
          <target state="translated">モジュールを展開した後、Get-DscResource を呼び出すと、結果として他のリソースが一覧表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you can’t find your resource in the list, make sure that schema.mof file for that resource exists.</source>
          <target state="translated">一覧にリソースが見つからない場合は、そのリソースの schema.mof ファイルが存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Resource module contains examples</source>
          <target state="translated">リソース モジュールに例が含まれている</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Creating quality examples which will help others understand how to use it.</source>
          <target state="translated">他のユーザーが使い方を理解できるように質の高いサンプルを作成します。</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is crucial, especially since many users treat sample code as documentation.</source>
          <target state="translated">多くのユーザーはサンプル コードをドキュメントとして扱うため、特に、このことは重要です。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>First, you should determine the examples that will be included with the module – at minimum, you should cover most important use cases for your resource:</source>
          <target state="translated">最初に、モジュールに含める例を決定する必要があります。少なくとも、リソースの最も重要なユース ケースを反映する必要があります。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If your module contains several resources that need to work together for an end-to-end scenario, the basic end-to-end example would ideally be first.</source>
          <target state="translated">エンド ツー エンドのシナリオで連携して動作する必要がある複数のリソースがモジュールに含まれる場合、基本的なエンド ツー エンドの例を最初に配置することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The initial examples should be very simple -- how to get started with your resources in small manageable chunks (e.g. creating a new VHD)</source>
          <target state="translated">最初の例は、非常に単純なもの - 小さい管理しやすいチャンク内のリソースを使い始める方法 (新しい VHD の作成など) にする必要があります。</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Subsequent examples should build on those examples (e.g. creating a VM from a VHD, removing VM, modifying VM), and show advanced functionality (e.g. creating a VM with dynamic memory)</source>
          <target state="translated">その後の例は、これらの例の上にビルドし (VHD からの VM の作成、VM の削除、VM の変更など)、高度な機能を示します (動的メモリがある VM の作成など)。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example configurations should be parameterized (all values should be passed to the configuration as parameters and there should be no hardcoded values):</source>
          <target state="translated">構成の例はパラメーター化する必要があります (すべての値は構成にパラメーターとして渡す必要があり、ハードコードされた値は使用しません)。</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It’s a good practice to include (commented out) example of how to call the configuration with the actual values at the end of the example script.</source>
          <target state="translated">スクリプトの例の最後に、実際の値を使用して構成を呼び出す方法の例 (コメント アウト) を含めることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, in the configuration above it isn't neccessarily obvious that the best way to specify UserAgent is:</source>
          <target state="translated">たとえば、上記の構成では、UserAgent を指定する最善の方法が次のとおりであることは必ずしも明白ではありません。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In which case a comment can clarify the intended execution of the configuration:</source>
          <target state="translated">その場合、その構成で意図する実行内容をコメントで明らかにできます。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For each example, write a short description which explains what it does, and the meaning of the parameters.</source>
          <target state="translated">各例で、実行内容を示す簡単な説明と、パラメーターの意味を記述します。</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Make sure examples cover most the important scenarios for your resource and if there’s nothing missing, verify that they all execute and put machine in the desired state.</source>
          <target state="translated">リソースのほとんどの重要なシナリオが例でカバーされていることを確認し、不足がない場合は、すべてが実行され、マシンを目的の状態にすることを検証します。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Error messages are easy to understand and help users solve problems</source>
          <target state="translated">エラー メッセージは、わかりやすく、ユーザーが問題を解決するために役立つものである</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Good error messages should be:</source>
          <target state="translated">優れたエラー メッセージとは、次のようなものです。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>There: The biggest problem with error messages is that they often don’t exist, so make sure they are there.</source>
          <target state="translated">存在する: エラー メッセージに関する最大の問題は、存在しないことがよくあるということです。メッセージが必ず存在するようにします。</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Easy to understand: Human readable, no obscure error codes</source>
          <target state="translated">わかりやすい: 人間が判読できる、明瞭なエラー コード。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Precise: Describe what’s exactly the problem</source>
          <target state="translated">正確である: 何が問題であるかを正確に説明します。</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Constructive: Advice how to fix the issue</source>
          <target state="translated">建設的である: 問題を解決する方法を助言します。</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Polite: Don’t blame user or make them feel bad Make sure you verify errors in End to End scenarios (using <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept>), because they may differ from those returned when running resource functions directly.</source>
          <target state="translated">礼儀正しい: ユーザーを非難したり、見下したりしません。エラーはリソース機能を直接実行したときに返されるものとは異なる可能性があるため、エンド ツー エンドのシナリオで (<bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> を使用して) エラーを確認します。</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Log messages are easy to understand and informative (including –verbose, –debug and ETW logs)</source>
          <target state="translated">ログ メッセージは、わかりやすく、有益な情報が含まれている (-verbose、-debug、および ETW ログを含む)</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Ensure that logs outputted by the resource are easy to understand and provide value to the user.</source>
          <target state="translated">リソースによって出力されるログがわかりやすく、ユーザーにとって価値のあるものであることを確認します。</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Resources should output all information which might be helpful to the user, but more logs is not always better.</source>
          <target state="translated">リソースは、ユーザーに役立つ可能性のあるすべての情報を出力する必要がありますが、常にログが多い方がよいとは限りません。</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You should avoid redundancy and outputting data which does not provide additional value – don’t make someone go through hundreds of log entries in order to find what they're looking for.</source>
          <target state="translated">冗長性および付加価値を提供しないデータを出力することは避ける必要があります。求めている情報を探して何百ものログ エントリを確認する必要がないようにします。</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Of course, no logs is not an acceptable solution for this problem either.</source>
          <target state="translated">もちろん、ログを出力しないことはこの問題に対する適切な解決策ではありません。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When testing, you should also analyze verbose and debug logs (by running <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> with –verbose and –debug switches appropriately), as well as ETW logs.</source>
          <target state="translated">テストする場合は、詳細ログとデバッグ ログ (<bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> を -verbose および -debug スイッチを適切に指定して実行する)、および ETW ログも分析する必要があります。</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To see DSC ETW logs, go to Event Viewer and open the following folder: Applications and Services- Microsoft - Windows - Desired State Configuration.</source>
          <target state="translated">DSC ETW ログを確認するには、イベント ビューアーに移動し、次のフォルダーを開きます。Applications and Services- Microsoft - Windows - Desired State Configuration。</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>By default there will be Operational channel, but make sure you enable Analytic and Debug channels before running the configuration.</source>
          <target state="translated">既定では稼動チャネルがありますが、構成を実行する前に分析チャネルとデバッグ チャネルを有効にします。</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To enable Analytic/Debug channels, you can execute script below:</source>
          <target state="translated">分析/デバッグ チャネルを有効にするには、次のスクリプトを実行できます。</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Resource implementation does not contain hardcoded paths</source>
          <target state="translated">リソースの実装にハードコードされたパスが含まれていない</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Ensure there are no hardcoded paths in the resource implementation, particularly if they assume language (en-us), or when there are system variables that can be used.</source>
          <target state="translated">リソースの実装にハードコードされたパスがないことを確認します (特に、それらが言語 (en-us) を想定する場合、または使用できるシステム変数がある場合)。</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If your resource need to access specific paths, use environment variables instead of hardcoding the path, as it may differ on other machines.</source>
          <target state="translated">リソースが特定のパスにアクセスする必要がある場合、パスは他のコンピューターでは異なる可能性があるため、パスをハードコーディングする代わりに環境変数を使用します。</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">次に例を示します。</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">次の代わりに、</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can write:</source>
          <target state="translated">次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Resource implementation does not contain user information</source>
          <target state="translated">リソースの実装にユーザー情報が含まれていない</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Make sure there are no email names, account information, or names of people in the code.</source>
          <target state="translated">コード内に電子メール名、アカウント情報、または、ユーザーの名前がないことを確認します。</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Resource was tested with valid/invalid credentials</source>
          <target state="translated">リソースが有効/無効な資格情報を使用してテストされている</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If your resource takes a credential as parameter:</source>
          <target state="translated">リソースが資格情報をパラメーターとして受け取る場合:</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Verify the resource works when Local System (or the computer account for remote resources) does not have access.</source>
          <target state="translated">ローカル システム (またはリモート リソースのコンピューター アカウント) にアクセスがない場合に、リソースが動作することを確認します。</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Verify the resource works with a credential specified for Get, Set and Test</source>
          <target state="translated">Get、Set、および Test に指定された資格情報でリソースが動作することを検証します。</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If your resource accesses shares, test all the variants you need to support, such as:</source>
          <target state="translated">リソースが共有にアクセスする場合は、サポートする必要がある次のようなすべてのバリエーションをテストします。</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Standard windows shares.</source>
          <target state="translated">標準の Windows 共有。</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>DFS shares.</source>
          <target state="translated">DFS 共有。</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>SAMBA shares (if you want to support Linux.)</source>
          <target state="translated">SAMBA 共有 (Linux をサポートする場合)。</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Resource does not require interactive input</source>
          <target state="translated">リソースには対話型の入力は不要です。</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions should be executed automatically and must not wait for user’s input at any stage of execution (e.g. you should not use <bpt id="p2">**</bpt>Get-Credential<ept id="p2">**</ept> inside these functions).</source>
          <target state="translated"><bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 関数は自動的に実行される必要があり、実行のいずれの段階でもユーザーの入力を待機することはできません (たとえば、これらの関数内で <bpt id="p2">**</bpt>Get-Credential<ept id="p2">**</ept> を使用することはできません)。</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If you need to provide user’s input, you should pass it to the configuration as parameter during the compilation phase.</source>
          <target state="translated">ユーザーの入力を提供する必要がある場合は、コンパイル フェーズ中にパラメーターとして構成に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Resource functionality was thoroughly tested</source>
          <target state="translated">リソース機能が十分にテストされている</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This checklist contains items which are important to be tested and/or are often missed.</source>
          <target state="translated">このチェックリストには、テストする必要がある重要な項目や見落とされがちな項目が含まれています。</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>There will be bunch of tests, mainly functional ones which will be specific to the resource you are testing and are not mentioned here.</source>
          <target state="translated">一連のテスト (テストするリソースに固有であり、ここに記載されていない、主に機能のテスト) があります。</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Don’t forget about negative test cases.</source>
          <target state="translated">負のテスト ケースを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Best practice: Resource module contains Tests folder with ResourceDesignerTests.ps1 script</source>
          <target state="translated">ベスト プラクティス: リソース モジュールに、ResourceDesignerTests.ps1 スクリプトを含む Test フォルダーが含まれている</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>It’s a good practice to create folder “Tests” inside resource module, create ResourceDesignerTests.ps1 file and add tests using <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> for all resources in given module.</source>
          <target state="translated">リソース モジュール内に "Test" フォルダーを作成し、ResourceDesignerTests.ps1 ファイルを作成し、指定したモジュール内のすべてのリソースに対して <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> と <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> を使用してテストを追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This way you can quickly validate schemas of all resources from the given modules and do a sanity check before publishing.</source>
          <target state="translated">この方法で、指定したモジュールのすべてのリソースのスキーマをすばやく検証し、発行する前にサニティ チェックを実行できます。</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For xRemoteFile, ResourceTests.ps1 could look as simple as:</source>
          <target state="translated">xRemoteFile の場合、ResourceTests.ps1 は次のように単純になります。</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Best practice: Resource folder contains resource designer script for generating schema</source>
          <target state="translated">ベスト プラクティス: リソース フォルダーにスキーマを生成するためのリソース デザイナー スクリプトが含まれている</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Each resource should contain a resource designer script which generates a mof schema of the resource.</source>
          <target state="translated">各リソースに、リソースの mof スキーマを生成する、リソース デザイナー スクリプトを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This file should be placed in <ph id="ph1">&lt;ResourceName&gt;</ph>\ResourceDesignerScripts and be named Generate<ph id="ph2">&lt;ResourceName&gt;</ph>Schema.ps1 For xRemoteFile resource this file would be called GenerateXRemoteFileSchema.ps1 and contain:</source>
          <target state="translated">このファイルは、<ph id="ph1">&lt;ResourceName&gt;</ph>\ResourceDesignerScripts に配置し、Generate<ph id="ph2">&lt;ResourceName&gt;</ph>Schema.ps1 という名前を付ける必要があります。xRemoteFile リソースの場合、このファイルの名前は GenerateXRemoteFileSchema.ps1 となり、次の内容が含まれます。</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Best practice: Resource supports -whatif</source>
          <target state="translated">ベスト プラクティス: リソースによる -whatif のサポート</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If your resource is performing “dangerous” operations, it’s a good practice to implement -whatif functionality.</source>
          <target state="translated">リソースが "危険な" 操作を実行する場合は、-whatif 機能を実装することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>After it’s done, make sure that whatif output correctly describes operations which would happen if command was executed without whatif switch.</source>
          <target state="translated">完了したら、whatif スイッチを使用しないでコマンドが実行された場合にどのようなことが発生するかについて、whatif 出力で正しく記述されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Also, verify that operations does not execute (no changes to the node’s state are made) when –whatif switch is present.</source>
          <target state="translated">また、-whatif スイッチが存在する場合は、その操作が実行されない (ノードの状態の変更は行われない) ことも確認します。</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, let’s assume we are testing File resource.</source>
          <target state="translated">たとえば、File リソースをテストすると仮定します。</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Below is simple configuration which creates file “test.txt” with contents “test”:</source>
          <target state="translated">"test" の内容を持つファイル "test.txt" を作成する単純な構成を次に示します。</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If we compile and then execute the configuration with the –whatif switch, the output is telling us exactly what would happen when we run the configuration.</source>
          <target state="translated">-whatif スイッチを含む構成をコンパイルし、実行すると、構成を実行したときに発生することが出力に正確に示されます。</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The configuration itself however was not executed (test.txt file was not created).</source>
          <target state="translated">ただし、構成自体は実行されていません (test.txt ファイルは作成されていません)。</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This list is not exhaustive, but it covers many important issues which can be encountered while designing, developing and testing DSC resources.</source>
          <target state="translated">この一覧ですべての内容を網羅しているわけではないですが、DSC リソースの設計、開発、テスト中に発生した多くの重要な問題を反映しています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
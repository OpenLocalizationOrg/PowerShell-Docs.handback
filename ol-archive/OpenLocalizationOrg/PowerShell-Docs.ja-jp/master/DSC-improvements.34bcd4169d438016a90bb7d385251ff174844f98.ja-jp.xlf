<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c88c145c3585befcee194499f7e21aaeac67c0f3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wmf\5.1\DSC-improvements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4940ecf97d6a01965fcba640e92711f4e51539f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b00ae31fadcb795922f6cc55557ee4f9d491e0aa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>DSC Improvements in WMF 5.1 (Preview)</source>
          <target state="translated">WMF 5.1 の DSC 機能強化 (プレビュー)</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>PowerShell, DSC, WMF</source>
          <target state="translated">PowerShell, DSC, WMF</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Improvements in Desired State Configuration (DSC) in WMF 5.1</source>
          <target state="translated">WMF 5.1 の Desired State Configuration (DSC) の機能強化</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>DSC class resource improvements</source>
          <target state="translated">DSC クラス リソースの機能強化</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, we have fixed the following known issues:</source>
          <target state="translated">WMF 5.1 で、次の既知の問題を修正しました。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Get-DscConfiguration may return empty values (null) or errors if a complex/hash table type is returned by Get() function of a class-based DSC resource.</source>
          <target state="translated">クラスベースの DSC リソースの Get() 関数によって複合/ハッシュ テーブル型が返される場合、Get-DscConfiguration は空の値 (null) やエラーを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Get-DscConfiguration returns error if RunAs credential is used in DSC configuration.</source>
          <target state="translated">Get-DscConfiguration は、RunAs 資格情報が DSC 構成で使用される場合、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Class-based resource cannot be used in a composite configuration.</source>
          <target state="translated">コンポジット構成では、クラス ベースのリソースは使用できません。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Start-DscConfiguration hangs if class-based resource has a property of its own type.</source>
          <target state="translated">Start-DscConfiguration は、クラス ベースのリソースに独自の型のプロパティがあると、応答を停止します。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Class-based resource cannot be used as an exclusive resource.</source>
          <target state="translated">クラス ベースのリソースは排他リソースとして使用できません。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DSC resource debugging improvements</source>
          <target state="translated">DSC リソースのデバッグの機能強化</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In WMF 5.0, the PowerShell debugger did not stop at the class-based resource method (Get/Set/Test) directly.</source>
          <target state="translated">WMF 5.0 では、PowerShell デバッガーは、クラス ベースのリソース メソッド (Get/Set/Test) で直接停止しませんでした。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, the debugger will stop at the class-based resource method in the same way as for MOF-based resources methods.</source>
          <target state="translated">WMF 5.1 では、このデバッガーは、MOF ベースのリソース メソッドと同様に、クラス ベースのリソース メソッドで停止します。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DSC pull client supports TLS 1.1 and TLS 1.2</source>
          <target state="translated">DSC プル クライアントは TLS 1.1 と TLS 1.2 をサポート</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Previously, the DSC pull client only supported SSL3.0 and TLS1.0 over HTTPS connections.</source>
          <target state="translated">以前、DSC プル クライアントは HTTPS 接続で SSL3.0 と TLS1.0 にのみ対応していました。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When forced to use more secure protocols, the pull client would stop functioning.</source>
          <target state="translated">より安全なプロトコルを使用するように強制されると、このプル クライアントは動作を停止しました。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, the DSC pull client no longer supports SSL 3.0 and adds support for the more secure TLS 1.1 and TLS 1.2 protocols.</source>
          <target state="translated">WMF 5.1 では、DSC プル クライアントは SSL 3.0 をサポートせず、より安全な TLS 1.1 プロトコルと TLS 1.2 プロトコルをサポートします。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Improved pull server registration</source>
          <target state="translated">プル サーバー登録の機能強化</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the earlier versions of WMF, simultaneous registrations/reporting requests to a DSC pull server while using the ESENT database would lead to LCM failing to register and/or report.</source>
          <target state="translated">以前のバージョンの WMF では、ESENT データベースを使用しながら同時に DSC プル サーバーに登録/レポートを要求すると、LCM は登録またはレポートに失敗していました。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In such cases, the event logs on the pull server will have the error "Instance Name already in use."</source>
          <target state="translated">そのような場合、プル サーバーのイベント ログに "既に使用されているインスタンス名" というエラーが記録されました。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This was due to an incorrect pattern being used to access the ESENT database in a multi-threaded scenario.</source>
          <target state="translated">これは、マルチスレッド シナリオで ESENT データベースにアクセスするとき、間違ったパターンが使用されることに起因していました。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, this issue has been fixed.</source>
          <target state="translated">WMF 5.1 では、この問題は修正されました。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Concurrent registrations or reporting (involving ESENT database) will work fine in WMF 5.1.</source>
          <target state="translated">同時登録または同時レポート (ESENT データベースを含む) が WMF 5.1 では正常に機能します。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This issue is applicable only to the ESENT database and does not apply to the OLEDB database.</source>
          <target state="translated">この問題は ESENT データベースにのみ関連し、OLEDB データベースには関連しません。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Pull partial configuration naming convention</source>
          <target state="translated">部分構成命名規則のプル</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the previous release, the naming convention for a partial configuration was that the MOF file name in the pull server/service should match the partial configuration name specified in the local configuration manager settings that in turn must match the configuration name embedded in the MOF file.</source>
          <target state="translated">以前のリリースでは、部分構成の命名規則は、プル サーバー/サービスの MOF ファイル名はローカル構成マネージャー設定に指定されている部分構成名に一致する必要があり、ローカル構成マネージャー設定は MOF ファイルに組み込まれている構成名に一致する必要があるというものでした。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See the snapshots below:</source>
          <target state="translated">下のスナップショットを参照してください。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>•   Local configuration settings which defines a partial configuration that a node is allowed to receive.</source>
          <target state="translated">•   ローカル構成設定により、あるノードに受信を許可する部分構成が定義されます。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sample metaconfiguration</source>
          <target state="translated">サンプルのメタ構成</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>•   Sample partial configuration definition</source>
          <target state="translated">•   サンプルの部分構成定義</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>•   'ConfigurationName' embedded in the generated MOF file.</source>
          <target state="translated">•   生成された MOF ファイルに組み込まれている 'ConfigurationName'。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sample generated mof file</source>
          <target state="translated">生成された mof ファイルのサンプル</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>•   FileName in the pull configuration repository</source>
          <target state="translated">•   プル構成リポジトリの FileName</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>FileName in Configuration Repository</source>
          <target state="translated">構成リポジトリの FileName</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Azure Automation service name generated MOF files as <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>.</source>
          <target state="translated">Azure Automation サービス名により、MOF ファイルが <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph> として生成されました。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>So the configuration below will compile to PartialOne.localhost.mof.</source>
          <target state="translated">そのため、下の構成は PartialOne.localhost.mof にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This made it impossible to pull one of your partial configuration from Azure Automation service.</source>
          <target state="translated">これで、Azure Automation サービスから部分構成をプルできなくなりました。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, partial configuration in the pull server/service can be named as <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>.</source>
          <target state="translated">WMF 5.1 では、プル サーバー/サービスの部分構成の名前を <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph> にできます。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Moreover, if a machine is pulling a single configuration from a pull server/service then the configuration file on the pull server configuration repository can have any file name.</source>
          <target state="translated">さらに、コンピューターがプル サーバー/サービスから 1 つの構成をプルする場合、プル サーバー構成リポジトリの構成ファイルに任意のファイル名を与えることができます。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This naming flexibility allow you to manage your nodes partially by Azure Automation service, where some configuration for your node is coming from Azure Automation DSC and you have a partial configuration that you wanted to manage locally.</source>
          <target state="translated">このように命名規則が柔軟なことから、ノードを部分的に Azure Automation サービスで管理し (ノードの一部の構成が Azure Automation DSC から誘導されます)、部分構成をローカル管理できます。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The metaconfiguration below will set up a node to be managed both locally as well as by Azure Automation service.</source>
          <target state="translated">以下のメタ構成では、ローカルと Azure Automation サービスの両方で管理されるようにノードが設定されます。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using PsDscRunAsCredential with DSC composite resources</source>
          <target state="translated">PsDscRunAsCredential と DSC 複合リソースを使用する</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We have added support for using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>PsDscRunAsCredential<ept id="p2">*</ept><ept id="p1">](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser)</ept> with DSC <bpt id="p3">[</bpt>Composite<ept id="p3">](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite)</ept> resources.</source>
          <target state="translated"><bpt id="p1">[</bpt><bpt id="p2">*</bpt>PsDscRunAsCredential<ept id="p2">*</ept><ept id="p1">](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser)</ept> と DSC <bpt id="p3">[</bpt>複合<ept id="p3">](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite)</ept>リソースが使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Users can now specify a value for PsDscRunAsCredential when using composite resources inside configurations.</source>
          <target state="translated">構成内で複合リソースを使用するとき、PsDscRunAsCredential の値を指定できるようになりました。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When specified, all resources run inside a composite resource as a RunAs user.</source>
          <target state="translated">指定されると、すべてのリソースが複合リソース内で RunAs ユーザーとして実行されます。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If a composite resource calls another composite resource, all of its resources are also executed as RunAs user.</source>
          <target state="translated">複合リソースが別の複合リソースを呼び出す場合、そのリソースのすべても RunAs ユーザーとして実行されます。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>RunAs credentials are propagated to any level of the composite resource hierarchy.</source>
          <target state="translated">RunAs 資格情報が複合リソース階層のあらゆるレベルに配信されます。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If any resource inside a composite resource specifies its own value for PsDscRunAsCredential, a merge error will result during configuration compilation.</source>
          <target state="translated">複合リソース内の何らかのリソースにより PsDscRunAsCredential の独自の値が指定される場合、構成コンパイル中に結合エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example shows usage with <bpt id="p1">[</bpt>WindowsFeatureSet<ept id="p1">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources)</ept> composite resource included in PSDesiredStateConfiguration module.</source>
          <target state="translated">この例は、PSDesiredStateConfiguration モジュールに含まれている <bpt id="p1">[</bpt>WindowsFeatureSet<ept id="p1">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources)</ept> 複合リソースの利用を示しています。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DSC module and configuration signing validations</source>
          <target state="translated">DSC のモジュールと構成の署名検証</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In DSC, configurations and modules are distributed to managed computers from the pull server.</source>
          <target state="translated">DSC では、プル サーバーから管理対象コンピューターに構成とモジュールが配信されます。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the pull server is compromised, an attacker can potentially modify the configurations and modules on the pull server and have it distributed to all managed nodes, compromising all of them.</source>
          <target state="translated">プル サーバーが侵害された場合、攻撃者はプル サーバーで構成とモジュールを改ざんし、すべての管理対象ノードに配信し、侵害する可能性があります。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, DSC supports validating the digital signatures on catalog and configuration (.MOF) files.</source>
          <target state="translated">WMF 5.1 では、DSC はカタログ ファイルと構成 (.MOF) ファイルのデジタル署名の検証に対応しています。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This feature will prevent nodes from executing configurations or module files which are not signed by a trusted signer or which have been tampered with after they have been signed by trusted signer.</source>
          <target state="translated">この機能では、信頼できる署名者が署名していない、あるいは信頼できる署名者が署名した後に改ざんされた構成ファイルまたはモジュール ファイルの実行が防止されます。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>How to sign configuration and module</source>
          <target state="translated">構成とモジュールに署名する方法</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Configuration Files (.MOFs): The existing PowerShell cmdlet <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> is extended to support signing of MOF files.</source>
          <target state="translated">構成ファイル (.MOF): 既存の PowerShell コマンドレット <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> が拡張され、MOF ファイルの署名に対応しています。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Modules: Signing of modules is done by signing the corresponding module catalog using the following steps:</source>
          <target state="translated">モジュール: モジュールの署名は、次の手順を利用し、対応するモジュール カタログに署名することで完了します:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Create a catalog file: A catalog file contains a collection of cryptographic hashes or thumbprints.</source>
          <target state="translated">カタログ ファイルの作成: カタログ ファイルには、暗号法のハッシュまたは拇印の集まりが含まれています。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Each thumbprint corresponds to a file that is included in the module.</source>
          <target state="translated">拇印はそれぞれ、モジュールに含まれるファイルに対応します。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The new cmdlet <bpt id="p1">[</bpt>New-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept>, has been added to enable users to create a catalog file for their module.</source>
          <target state="translated">新しいコマンドレット <bpt id="p1">[</bpt>New-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept> が追加され、ユーザーは自分のモジュールのカタログ ファイルを作成できます。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Sign the catalog file: Use <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> to sign the catalog file.</source>
          <target state="translated">カタログ ファイルの署名: <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> を利用し、カタログ ファイルに署名します。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Place the catalog file inside the module folder.</source>
          <target state="translated">モジュール フォルダー内にカタログ ファイルを配置します。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>By convention, module catalog file should be placed under the module folder with the same name as the module.</source>
          <target state="translated">慣例では、モジュール カタログ ファイルは、モジュールと同じ名前のモジュール フォルダーの下に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>LocalConfigurationManager settings to enable signing validations</source>
          <target state="translated">LocalConfigurationManager 設定で署名検証を有効にする</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Pull</source>
          <target state="translated">プル</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The LocalConfigurationManager of a node performs signing validation of modules and configurations based on its current settings.</source>
          <target state="translated">ノードの LocalConfigurationManager は、その現在の設定に基づき、モジュールと構成の署名を検証します。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>By default, signature validation is disabled.</source>
          <target state="translated">既定では、署名検証は無効です。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Signature validation can enabled by adding the ‘SignatureValidation’ block to the meta-configuration definition of the node as shown below:</source>
          <target state="translated">署名検証は、‘SignatureValidation’ ブロックを下の図のようにノードのメタ構成定義に追加することで有効にできます:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Setting the above metaconfiguration on a node enables signature validation on downloaded configurations and modules.</source>
          <target state="translated">ノードに上記のメタ構成を設定すると、ダウンロードした構成とモジュールで署名を検証できます。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The Local Configuration Manager will perform the following steps to verify the digital signatures.</source>
          <target state="translated">ローカル構成マネージャーは次の手順でデジタル署名を検証します。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Verify the signature on a configuration file (.MOF) is valid.</source>
          <target state="translated">構成ファイル (.MOF) の署名が有効であることを検証します。</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It uses the PowerShell cmdlet <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept>, which is extended in 5.1 to support MOF signature validation.</source>
          <target state="translated">これは PowerShell コマンドレット <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept> を使用します。このコマンドレットは 5.1 で拡張され、MOF 署名検証に対応しています。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Verify the certificate authority that authorized the signer is trusted.</source>
          <target state="translated">署名者が信頼できることを認定した証明機関を検証します。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Download module/resource dependencies of the configuration to a temp location.</source>
          <target state="translated">構成のモジュール/リソース依存性を一時的な場所にダウンロードします。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Verify the signature of the catalog included inside the module.</source>
          <target state="translated">モジュール内に含まれるカタログの署名を検証します。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Find a <ph id="ph1">`&lt;moduleName&gt;.cat`</ph> file and verify its signature using the cmdlet  <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept>.</source>
          <target state="translated"><ph id="ph1">`&lt;moduleName&gt;.cat`</ph> ファイルを見つけ、コマンドレット <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept> でその署名を検証します。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Verify the certification authority that authenticated the signer is trusted.</source>
          <target state="translated">署名者が信頼できることを認定した証明機関を検証します。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Verify the content of the modules has not been tampered using the new cmdlet <bpt id="p1">[</bpt>Test-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept>.</source>
          <target state="translated">新しいコマンドレット <bpt id="p1">[</bpt>Test-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept> を利用し、モジュールのコンテンツが改ざんされていないことを検証します。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Install-Module to $env:ProgramFiles\WindowsPowerShell\Modules\</source>
          <target state="translated">$env:ProgramFiles\WindowsPowerShell\Modules\ にモジュールをインストールする</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Process configuration</source>
          <target state="translated">プロセス構成</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Note: Signature validation on module-catalog and configuration is only performed when the configuration is applied to the system for the first time or when the module is downloaded and installed.</source>
          <target state="translated">注: モジュール カタログと構成の署名検証は、構成がシステムに最初に適用されるときか、モジュールがダウンロードされ、インストールされるときにのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Consistency runs do not validate the signature of Current.mof or its module dependencies.</source>
          <target state="translated">整合性実行では、Current.mof やそのモジュール依存性の署名は検証されません。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If verification has failed at any stage, for instance, if the configuration pulled from the pull server is unsigned, then processing of the configuration will terminate with the error shown below and all temporary files will be deleted.</source>
          <target state="translated">何らかの段階で検証に失敗した場合、たとえば、プル サーバーからプルされた構成に署名がされていない場合、構成の処理が中止となり、下にエラーが表示されます。一時ファイルはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sample Error Output Configuration</source>
          <target state="translated">構成のエラー出力のサンプル</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Similarly, pulling a module whose catalog is not signed will result in the following error:</source>
          <target state="translated">同様に、カタログに署名のないモジュールがプルされると次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sample Error Output Module</source>
          <target state="translated">モジュールのエラー出力のサンプル</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Push</source>
          <target state="translated">プッシュ</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A configuration delivered by using push might be tampered with at its source before it delivered to the node.</source>
          <target state="translated">プッシュで配信された構成は、ノードに届く前にその出所で改ざんされていた可能性があります。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The Local Configuration Manager will perform similar signature validation steps for pushed or published configuration(s).</source>
          <target state="translated">ローカル構成マネージャーは、プッシュまたは公開された構成に対して同様の署名検証手順を実行します。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Below is a complete example of signature validation for push.</source>
          <target state="translated">以下は、プッシュの署名検証の完全例です。</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Enable signature validation on the node.</source>
          <target state="translated">ノードで署名検証を有効にします。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Create a sample configuration file.</source>
          <target state="translated">サンプル構成ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Try pushing the unsigned configuration file in to the node.</source>
          <target state="translated">署名のない構成ファイルをノードにプッシュしてみます。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ErrorUnsignedMofPushed</source>
          <target state="translated">ErrorUnsignedMofPushed</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Sign the configuration file using code-signing certificate.</source>
          <target state="translated">コード署名証明書を利用し、構成ファイルに署名します。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>SignMofFile</source>
          <target state="translated">SignMofFile</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Try pushing the signed MOF file.</source>
          <target state="translated">署名された MOF ファイルをプッシュしてみます。</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>SignMofFile</source>
          <target state="translated">SignMofFile</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>